<?xml-stylesheet href="../-mix+doc/index.xsl" type="text/xsl" ?>
<doc:root
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:wc="https://github.com/nin-jin/wc"
    xmlns:doc="https://github.com/nin-jin/doc"
    >

    <h1>Тесты и документация</h1>

    <p>Библиотека, предназначенная для тестирования кода. Вы просто создаёте html-страничку, прописываете в тэге html пространство имён <code>xmlns:wc="https://github.com/nin-jin/wc"</code>, подключаете к ней указанные <a href="../../lib_dev/-mix/index.js">скрипты</a>, да <a href="../../lib_dev/-mix/index.css">стили</a>, и можете смело использовать описанные далее виджеты.</p>

    <h2>wc:js-test</h2>

    <p>Данный виджет предназначен для написания яваскриптовых тестов. Окружите проверяемый код тэгами <code>wc:js-test</code> и он автоматически будет выполнен при открытии страницы.</p>
    
    <p>Давайте напишем простейший тест:</p>
    
    <wc:demo>
    <![CDATA[
        <wc:spacer>
            <wc:js-test>
                var foo= 'bar'
            </wc:js-test>
        </wc:spacer>
    ]]>
    </wc:demo>
    
    <p>Как видите, он покраснел - это означает, что тест не пройден. Это могло произойти по разным причинам: синтаксическая ошибка, возникшее исключение, либо просто не указано, когда считать тест завершённым. Починим тест, чтобы он позеленел:</p>

    <wc:demo>
    <![CDATA[
        <wc:spacer>
            <wc:js-test>
                var foo= 'bar'
                _test.ok()
            </wc:js-test>
        </wc:spacer>
    ]]>
    </wc:demo>
    
    <p>В каждом тесте вам доступна переменная <code>_test</code>, в которой содержится две функции: ok и not. Первая предназначена для позитивных утверждений (вызванная без параметров она говорит, что "всё хорошо, можно спать спокойно"), а вторая - для негативных (вызов без параметров тут же фэйлит тест).</p>
    
    <wc:demo>
    <![CDATA[
        <wc:spacer>
            <wc:js-test>
                _test.not()
                var foo= 'bar'
                _test.ok()
            </wc:js-test>
        </wc:spacer>
    ]]>
    </wc:demo>
    
    <p>Обе функции могут принимать один или два параметра. В случае одного, чтобы пройти тест нужно в <code>ok</code> передать истинное значение, или же ложное, но в <code>not</code>: </p>

    <wc:demo>
    <![CDATA[
        <wc:spacer>
            <wc:js-test>
                _test.ok( true )
            </wc:js-test>
            <wc:js-test>
                _test.not( false )
            </wc:js-test>
            <wc:js-test>
                _test.ok( 0 )
            </wc:js-test>
            <wc:js-test>
                _test.not( 'foo' )
            </wc:js-test>
        </wc:spacer>
    ]]>
    </wc:demo>
    
    <p>Как видите, переданное значение выводится рядом с указанием его типа, определяемого с помощью <a href="../../jam/classOf/jam+classOf.doc.xml">$jam.classOf</a>.</p>
    
    <p>Если же функциям передавать 2 параметра, то <code>ok</code> будет сравнивать их на равенство, а <code>not</code> - на неравенство, при этом оба переданных параметра будут выведены следом (кроме случая, где ожидается совпадение и оно действительно происходит):</p>

    <wc:demo>
    <![CDATA[
        <wc:spacer>
            <wc:js-test>
                _test.ok( 123, 123 )
            </wc:js-test>
            <wc:js-test>
                _test.not( 123, '123' )
            </wc:js-test>
            <wc:js-test>
                _test.ok( 0, false )
            </wc:js-test>
            <wc:js-test>
                _test.not( true, true )
            </wc:js-test>
        </wc:spacer>
    ]]>
    </wc:demo>
    
    <p>Пока речь шла лишь о синхронных тестах, но можно писать и асинхронные. Для этого надо указать таймаут в миллисекундах, до истечения которого тест должен быть завершён:</p>

    <wc:demo>
    <![CDATA[
        <wc:spacer>
            <wc:js-test>
                _test.deadline( 100 )
                _test.ok()
            </wc:js-test>
            <wc:js-test>
                _test.deadline( 100 )
                $jam.schedule( 50, _test.ok )
            </wc:js-test>
            <wc:js-test>
                _test.deadline( 50 )
                $jam.schedule( 100, _test.ok )
            </wc:js-test>
            <wc:js-test>
                $jam.schedule( 50, _test.ok )
            </wc:js-test>
        </wc:spacer>
    ]]>
    </wc:demo>
    
    <p>Приятным бонусом является возможность отредактировать тест прямо на странице и по <code>ctrl+enter</code> запустить его - это позволяет прямо на месте подебажить код. Имейте ввиду, что все исключения будут сыпаться в консоль ошибок браузера.</p>
    
    <h2>wc:js-bench</h2>
    
    <p>У каждой задачи есть множество вариантов решения. Но какой из-них выбрать? Как правило достаточно самого простого, но бывают случаи, где требуется оптимизация. Тут-то и приходит на помощь данный виджет. Вам не нужно заботиться о выборе правильного числа итераций, не нужно писать никакой кроссбраузерной обвязки для измерений - просто киньте на страницу несколько <code>wc:js-bench</code>, завёрнутых в <code>wc:js-bench_list</code>, повставляйте в них свои решения и получите сводную табличку со временем работы каждого варианта.</p>
    <p>Давайте проверим, сколько времени уходит у браузера на создание объектов различными способами:</p>
    <p>
        <wc:demo>
        <![CDATA[
            <wc:spacer>
                <wc:js-bench_list>
                    <wc:js-bench>
                        var x=
                        {   a: 1
                        ,   b: 2
                        }
                    </wc:js-bench>
                    <wc:js-bench>
                        var x=
                        new function( ){
                            this.a= 1
                            this.b= 2
                        }
                    </wc:js-bench>
                </wc:js-bench_list>
            </wc:spacer>
        ]]>
        </wc:demo>
    </p>
    
    <p>Вы можете запустить сразу все тесты в таблице кликнув по её заголовку, либо можно запускать каждый по отдельности, поставив курсор в исходный код и нажав <code>ctrl+enter</code>.</p>
    <p>Вы наверно уже задаётесь вопросом, что это за дополнительная колонка с нулями? Дело в том, что не всегда тестируемый код можно отделить от его обвязки. Например - как проверить какова скорость доступа к полям внутри конструкции <code>with</code>? А вот так:</p>
    <p>
        <wc:demo>
        <![CDATA[
            <wc:spacer>
                <wc:js-bench_list>
                    <wc:js-bench>
                        var obj= { foo: 123 }
                        _bench.begin()
                            obj.foo
                        _bench.end()
                    </wc:js-bench>
                    <wc:js-bench>
                        var obj= { foo: 123 }
                        with( obj ){
                            _bench.begin()
                                foo
                            _bench.end()
                        }
                    </wc:js-bench>
                </wc:js-bench_list>
            </wc:spacer>
        ]]>
        </wc:demo>
    </p>
    <p>Специальные метки <code>_bench.begin()</code> и <code>_bench.end()</code> служат для отделения собственно тестируемого кода, от его окружения. Время работы окружающего кода и выводится в последнем столбце.</p>
    
</doc:root>
