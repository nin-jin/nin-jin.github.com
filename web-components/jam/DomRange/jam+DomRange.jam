with( $jam )
$define
(   '$DomRange'
,   $Class( function( klass, proto ){
    
        proto.constructor=
        $Poly
        (   $support.selectionModel.select
            (   {   'w3c': function( ){
                        var sel= $selection()
                        if( sel.rangeCount ) this.$= sel.getRangeAt( 0 ).cloneRange()
                        else this.$= $doc().createRange()
                        return this
                    }
                ,   'ms': function( ){
                        this.$= $selection().createRange()
                        return this
                    }
                }
            )
        ,   function( range ){
                if( !range ) throw new Error( 'Wrong TextRange object' )
                this.$= klass.raw( range )
                return this
            }
        )
        
        proto.select=
        $support.selectionModel.select
        (   {   'w3c': function( ){
                    var sel= $selection()
                    sel.removeAllRanges()
                    sel.addRange( this.$ )
                    return this
                }
            ,   'ms': function( ){
                    this.$.select()
                    return this
                }
            }
        )
        
            
        proto.collapse2end=
        function( ){
            this.$.collapse( false )
            return this
        }
        
        proto.collapse2start=
        function( ){
            this.$.collapse( true )
            return this
        }
        
        proto.dropContents=
        $support.selectionModel.select
        (   {   'w3c': function( ){
                    this.$.deleteContents()
                    return this
                }
            ,   'ms': function( ){
                    this.text( '' )
                }
            }
        )

        proto.text=
        $support.selectionModel.select
        (   {   'w3c': $Poly
                (   function( ){
                        return this.$.toString()
                    }
                ,   function( text ){
                        this.html( $htmlEscape( text ) )
                        return this
                    }
                )
            ,   'ms': $Poly
                (   function( ){
                        return $html2text( this.html() )
                        return this.$.text
                    }
                ,   function( text ){
                        this.$.text= text
                        return this
                    }
                )
            }
        )

        proto.html=
        $support.selectionModel.select
        (   {   'w3c': $Poly
                (   function( ){
                        return $Node( this.$.cloneContents() ).toString()
                    }
                ,   function( html ){
                        this.dropContents()
                        var node= $Node.parse( html ).$
                        this.$.insertNode( node )
                        this.$.selectNode( node )
                        return this
                    }
                )
            ,   'ms': $Poly
                (   function( ){
                        return this.$.htmlText
                    }
                ,   function( html ){
                        this.$.pasteHTML( html )
                        return this
                    }
                )
            }
        )
    
        proto.ancestorNode=
        $support.selectionModel.select
        (   {   'w3c': function( ){
                    return this.$.commonAncestorContainer
                }
            ,   'ms': function( ){
                    return this.$.parentNode
                }
            }
        )
        
        proto.compare=
        $support.selectionModel.select
        (   {   'w3c': function( how, range ){
                    range= $DomRange( range ).$
                    how= Range[ how.replace( '2', '_to_' ).toUpperCase() ]
                    return range.compareBoundaryPoints( how, this.$ )
                }
            ,   'ms':  function( how, range ){
                    range= $DomRange( range ).$
                    how= how.replace( /(\w)(\w+)/g, function( str, first, tail ){
                        return first.toUpperCase() + tail
                    }).replace( '2', 'To' )
                    return range.compareEndPoints( how, this.$ )
                }
            }
        )
        
        proto.hasRange=
        function( range ){
            range= $DomRange( range )
            var isAfterStart= ( this.compare( 'start2start', range ) >= 0 )
            var isBeforeEnd= ( this.compare( 'end2end', range ) <= 0 )
            return isAfterStart && isBeforeEnd
        }
    
        proto.equalize=
        $support.selectionModel.select
        (   {   'w3c': function( how, range ){
                    how= how.split( 2 )
                    var method= { start: 'setStart', end: 'setEnd' }[ how[ 0 ] ]
                    range= $DomRange( range ).$
                    this.$[ method ]( range[ how[1] + 'Container' ], range[ how[1] + 'Offset' ] )
                    return this
                }
            ,   'ms':  function( how, range ){
                    range= $DomRange( range ).$
                    how= how.replace( /(\w)(\w+)/g, function( str, first, tail ){
                        return first.toUpperCase() + tail
                    }).replace( '2', 'To' )
                    this.$.setEndPoint( how, range )
                    return this
                }
            }
        )
        
        proto.move=
        $support.selectionModel.select
        (   {   'w3c': function( offset ){
                    this.collapse2start()
                    var current= $Node( this.$.startContainer )
                    if( this.$.startOffset ){
                        var temp= current.$.childNodes[ this.$.startOffset - 1 ]
                        if( temp ){
                            current= $Node( temp ).follow()
                        } else {
                            offset+= this.$.startOffset
                        }
                    }
                    while( current ){
                        if( current.name() === '#text' ){
                            var range= $DomRange().aimNode( current )
                            var length= current.$.nodeValue.length
                            
                            if( !offset ){
                                this.equalize( 'start2start', range )
                                return this
                            } else if( offset >= length ){
                                offset-= length
                            } else {
                                this.$.setStart( current.$, offset )
                                return this
                            }
                        }
                        current= current.delve()
                    }
                    return this
                }
            ,   'ms': function( offset ){
                    this.$.move( 'character', offset )
                    return this
                }
            }
        )

        proto.clone=
        $support.selectionModel.select
        (   {   'w3c': function( ){
                    return $DomRange( this.$.cloneRange() )
                }
            ,   'ms': function( ){
                    return $DomRange( this.$.duplicate() )
                }
            }
        )
        
        proto.aimNodeContent=
        $support.selectionModel.select
        (   {   'w3c': function( node ){
                    this.$.selectNodeContents( $raw( node ) )
                    return this
                }
            ,   'ms': function( node ){
                    this.$.moveToElementText( $raw( node ) )
                    return this
                }
            }
        )
        
        proto.aimNode=
        $support.selectionModel.select
        (   {   'w3c': function( node ){
                    this.$.selectNode( $raw( node ) )
                    return this
                }
            ,   'ms': function( node ){
                    this.aimNodeContent( $raw( node ) )
                    $log('check this')
                    this.$.expand( 'textedit' )
                    return this
                }
            }
        )
        
    })
)
