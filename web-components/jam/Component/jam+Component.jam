with( $jam )
$define( '$Component', function( tagName, factory ){
	if(!( this instanceof $Component )) return new $Component( tagName, factory )
	var fieldName= 'componnet|' + tagName + '|' + (new Date).getTime()

	var isBroken= ( $support.htmlModel() === 'ms' )
	var chunks= /(?:(\w+):)?([-\w]+)/.exec( tagName )
	var scopeName= isBroken && chunks && chunks[1] || ''
	var localName= isBroken && chunks && chunks[2] || tagName
	var nodes= $doc().getElementsByTagName( localName )

	var elements= []

	var checkName=
	( tagName === '*' )
	?	$Value( true )
	:	new function(){
			var nameChecker= RegExp( '^' + localName + '$', 'i' )
			if( isBroken ){
				var scopeChecker= RegExp( '^' + scopeName + '$', 'i' )
				return function( el ){
					return scopeChecker.test( el.scopeName ) && nameChecker.test( el.nodeName )
				}
			}
			return function( el ){
				if( el.namespaceURI && el.namespaceURI !== 'http://www.w3.org/1999/xhtml' ) return false
				return nameChecker.test( el.nodeName )
			}
		}
	
	var isAttached=
	function( el ){
		return typeof el[ fieldName ] === 'object'
	}
	
	var attach=
	function( el ){

		el[ fieldName ]= null
		var widget= factory( el )
		el[ fieldName ]= widget || null
		if( widget ) elements.push( el )
	}
	
	var attachIfLoaded=
	function( el ){
		var cur= el
		do {
			if( !cur.nextSibling ) continue
			attach( el )
			break
		} while( cur= cur.parentNode )
	}
	
	var dropElement=
	function( el ){
		for( var i= 0; i < elements.length; ++i ){
			if( elements[ i ] !== el ) continue
			elements.splice( i, 1 )
			return
		}
	}
	
	var detach=
	function( nodeList ){
		for( var i= 0, len= nodeList.length; i < len; ++i ){
			var node= nodeList[ i ]
			var widget= node[ fieldName ]
			if( widget.destroy ) widget.destroy()
			node[ fieldName ]= void 0
			dropElement( node )
		}
	}
	
	var check4attach=
	function( nodeList ){
		var filtered= []
		filtering:
		for( var i= 0, len= nodeList.length; i < len; ++i ){
			var node= nodeList[ i ]
			if( isAttached( node ) ) continue
			if( !checkName( node ) ) continue
			filtered.push( node )
		}
		for( var i= 0, len= filtered.length; i < len; ++i ){
			attachIfLoaded( filtered[ i ] )
		}
	}

	var check4detach=
	function( nodeList ){
		var filtered= []
		filtering:
		for( var i= 0, len= nodeList.length; i < len; ++i ){
			var node= nodeList[ i ]

			if( !node[ fieldName ] ) continue

			var current= node
			var doc= current.ownerDocument
			while( current= current.parentNode ){
				if( current === doc ) continue filtering
			}

			filtered.push( node )
		}
		detach( filtered )
	}

	var checkLost4detach=
	function( nodeList ){
		var filtered= []
		filtering:
		for( var i= 0, len= nodeList.length; i < len; ++i ){
			var node= nodeList[ i ]

			if( !node[ fieldName ] ) continue

			filtered.push( node )
		}
		
		detach( filtered )
	}

	var tracking=
	function( ){
		check4attach( nodes )
		check4detach( elements )
	}

	var interval=
	$glob().top.setInterval( tracking, 100 )

	$domReady.then(function(){
		if( $support.eventModel() === 'w3c' ){
			$glob().top.clearInterval( interval )
		}
		attachIfLoaded= attach
		tracking()
	})

	if( $support.eventModel() === 'w3c' ){
		var docEl= $doc().documentElement
		docEl.addEventListener( 'DOMNodeInserted', function( ev ){
			var node= ev.target
			$schedule( 0, function( ){
				check4attach([ node ])
				if( node.getElementsByTagName ) check4attach( node.getElementsByTagName( '*' ) )
			})
		}, false )
		docEl.addEventListener( 'DOMNodeRemoved', function( ev ){
			var node= ev.target
			$schedule( 0, function( ){
				checkLost4detach([ node ])
				if( node.getElementsByTagName ) check4detach( node.getElementsByTagName( '*' ) )
			})
		}, false )
	}
	
	this.tagName= $Value( tagName )
	this.factory= $Value( factory )
	this.elements=
	function( ){
		return elements.slice( 0 )
	}
})
