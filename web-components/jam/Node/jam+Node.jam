with( $jam )
$define
(   '$Node'
,   $Class( function( klass, proto ){
        
        klass.create=
        $Poly
        (   null
        ,   function( val ){
                var obj= new klass
                if( $classOf( val ) === 'String' ){
                    switch( val ){
                        case '#text':
                            val= $doc().createTextNode( '' )
                            break
                        case '#comment':
                            val= $doc().createComment( '' )
                            break
                        case '#document-fragment':
                            val= $doc().createDocumentFragment()
                            break
                        default:
                            val= $doc().createElement( val )
                            break
                    }
                    if( val.parentNode ) val.parentNode.removeChild( val )
                }
                if( typeof val !== 'object' ){
                    throw new Error( 'Wrong node: ' + val )
                }
                if( val.toNode ) val= val.toNode()
                obj.$= val
                return obj
            }
        )
        
        proto.toNode=
        $Poly
        (   function( ){
                return this.$
            }
        )
        
        proto.text=
        $Poly
        (   function( ){
                return $html.text( this.$.innerHTML )
            }
        ,   new function(){
                var fieldName= $switch( $support.htmlModel(), { w3c: 'textContent', ms: 'innerText' } )
                return function( val ){
                    if( this.text() === val ) return this
                    this.$[ fieldName ]= $String( val ).$
                    return this
                }
            }
        )
        
        proto.html=
        $Poly
        (   function( ){
                var val= this.$.innerHTML.replace( /<\/?[A-Z]+/g, function( str ){
                    return str.toLowerCase()
                })
                return val
            }
        ,   function( val ){
                if( this.html() === val ) return this
                this.$.innerHTML= ''
                this.tail( $dom.parse( val ) )
                return this
            }
        )
        
        proto.clear=
        $Poly
        (   function( ){
                this.html( '' )
                return this
            }
        )
        
        proto.name=
        $Poly
        (   $switch
            (   $support.htmlModel()
            ,   {   'w3c': function( ){
                        return this.$.nodeName.toLowerCase()
                    }
                ,   'ms': function( ){
                        var scope= this.$.scopeName
                        if( scope === 'HTML' ) scope= ''
                        var name= this.$.nodeName.toLowerCase()
                        return scope ? scope + ':' + name : name
                    }
                }
            )
        )
        
        proto.attr=
        $Poly
        (   null
        ,   function( name ){
                return this.$.getAttribute( name )
            }
        ,   function( name, val ){
                this.$.setAttribute( $String( name ).$, $String( val ).$ )
                return this
            }    
        )
        
        proto.state=
        $Poly
        (   function( ){
                return this.param( [] )
            }
        ,   function( key ){
                return $Hiqus({ splitterChunks: ' ' }).merge( this.$.className ).get( key )
            }
        ,   function( key, value ){
                this.$.className= $Hiqus({ splitterChunks: ' ' }).merge( this.$.className ).put( key, value )
                return this
            }
        )
        
        proto.editable=
        $Poly
        (   function( ){
                return this.$.contentEditable
            }
        ,   function( val ){
                this.$.contentEditable= val
                return this
            }
        )
        
        proto.listen=
        $Poly
        (   null
        ,   null
        ,   $switch
            (   $support.eventModel()
            ,   {   'w3c': function( eventName, proc ){
                        this.$.addEventListener( eventName, proc, false )
                        
                        var self= this
                        return function(){
                            self.$.removeEventListener( eventName, proc, false )
                        }
                    }
                ,   'ms': function( eventName, proc ){
                        var proc2= proc
                        var eventName2= eventName
                        if( !/^\w+$/.test( eventName ) ){
                            eventName2= 'beforeeditfocus'
                            proc2= function( ev ){
                                if( ev.originalType !== eventName ) return
                                ev.type= ev.originalType
                                proc( ev )
                            }
                        }
                        var proc3= function(){
                            var ev= $glob().event
                            //ev= $doc().createEventObject( ev )
                            if( !ev.target ) ev.target= ev.srcElement 
                            proc2( ev )
                        }
                        this.$.attachEvent( 'on' + eventName2, proc3, false )
    
                        var self= this
                        return function(){
                            self.$.detachEvent( 'on' + eventName2, proc3, false )
                        }
                    }
                }
            )
        )
        
        proto.scream=
        $Poly
        (   null
        ,   $switch
            (   $support.eventModel()
            ,   {   'w3c': function( ev ){
                        ev= $Event( ev ).$
                        this.$.dispatchEvent( ev )
                    }
                ,   'ms': function( ev ){
                        ev= $Event( ev ).$
                        var eventName= ev.type
                        if( !/^\w+$/.test( eventName ) ){
                            eventName= 'beforeeditfocus'
                        }
                        ev.originalType= ev.type
                        this.$.fireEvent( 'on' + eventName, ev )
                    }
                }
            )
        )
        
        proto.innerRange=
        $switch
        (   $support.selectionModel()
        ,   {   'w3c': function( ){
                    var range= $DomRange()
                    range.$.selectNodeContents( this.$ )
                    return range.$
                }
            ,   'ms': function( node ){
                    var range= $DomRange()
                    range.$.moveToElementText( this.$ )
                    return range.$
                }
            }
        )
        
        proto.outerRange=
        $switch
        (   $support.selectionModel()
        ,   {   'w3c': function( node ){
                    var range= $DomRange()
                    range.$.selectNode( this.$ )
                    return range.$
                }
            ,   'ms': function( node ){
                    var range= this.innerRange()
                    $log('check this')
                    range.$.expand( 'textedit' )
                    return range.$
                }
            }
        )
        
        proto.childList=
        function( name ){
            var list= this.$.childNodes
            var filtered= []
            
            for( var i= $Node( this ).head(); i.$; i.next() ){
                if( name && ( i.name() !== name ) ) continue
                filtered.push( i.$ )
            }
            
            return filtered
        }
        
        proto.ensureChild=
        function( name ){
            this.$= this.childList( name )[ 0 ] || $Node( name ).parent( this ).$
            return this
        }
        
        proto.descList=
        function( name ){
            var list= this.$.getElementsByTagName( name )
            var filtered= []
            
            for( var i= 0; i < list.length; ++i ){
                filtered.push( list[ i ] )
            }
            
            return filtered
        }

        proto.parent= 
        $Poly
        (   function( ){
                this.$= this.$.parentNode
                return this
            }
        ,   function( node ){
                var parent= this.$.parentNode
                if( node ){
                    node= $Node( node ).$
                    if( parent ) parent.insertBefore( node, this.$ )
                    if( parent === node ) return this
                    node.appendChild( this.$ )
                } else {
                    if( !parent ) return this
                    parent.removeChild( this.$ )
                }
                return this
            }
        )
        
        proto.head=
        $Poly
        (   function(){
                this.$= this.$.firstChild
                return this
            }
        ,   function( node ){
                node= $Node( node ).$
                this.$.insertBefore( node, this.$.firstChild )
                return this
            }
        )
        
        proto.tail=
        $Poly
        (   function(){
                this.$= this.$.lastChild
                return this
            }
        ,   function( node ){
                node= $Node( node ).$
                this.$.appendChild( node )
                return this
            }
        )
        
        proto.next=
        $Poly
        (   function(){
                this.$= this.$.nextSibling
                return this
            }
        ,   function( node ){
                node= $Node( node ).$
                var parent= this.$.parentNode
                var next= this.$.nextSibling
                parent.insertBefore( node, next ) 
                return this
            }   
        )
        
        proto.delve=
        $Poly
        (   function( ){
                var child= this.$.firstChild
                if( child ) this.$= child
                else this.follow()
                return this
            }
        )

        proto.follow=
        $Poly
        (   function( ){
                var node= this.$
                while( true ){
                    this.$= node.nextSibling
                    if( this.$ ) return this
                    node= node.parentNode
                    if( !node ) return this
                }
            }
        )

        proto.prev=
        $Poly
        (   function(){
                this.$= this.$.previousSibling
                return this
            }
        ,   function( node ){
                node= $Node( node ).$
                var parent= this.$.parentNode
                parent.insertBefore( node, this.$ ) 
                return this
            }   
        )
        
        proto.inDom=
        $Poly
        (   function( ){
                var node= $Node( this.$ )
                var doc= node.$.ownerDocument
                while( node.parent().$ ){
                    if( node.$ === doc ) return true
                }
                return false
            }
        )
        
    })
)
