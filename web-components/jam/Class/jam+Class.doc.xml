<?xml-stylesheet href="../-mix+doc/index.xsl" type="text/xsl" ?>
<doc:root
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:wc="https://github.com/nin-jin/wc"
    xmlns:doc="https://github.com/nin-jin/doc"
    >

    <h1>$jam.$Class</h1>

    <p>Создаёт класс - функцию, создающую объекты. В качестве параметра принимает функцию-инициализатор, которой передаёт свежесозданный класс и его прототип. У каждого класса есть метод create являющийся фабрикой и вызываемый при инстанцировании класса. Сам класс следовательно тоже является фабрикой. Инстанцирование его через new - создаёт неинициализированный инстанс, что используется для реализации наследования без проксирующих классов.</p>

    <wc:js-test> _test.ok( $jam.$Class ) </wc:js-test>
    <wc:js-test>
        var ClassInner
        var Class= $jam.$Class(function( klass ){
            ClassInner= klass
        })
        _test.ok( Class, ClassInner )
    </wc:js-test>
    <wc:js-test>
        var Class= $jam.$Class(function( klass ){ })
        _test.ok( Class() instanceof Class )
    </wc:js-test>
    <wc:js-test>
        var obj= {}
        var Class= $jam.$Class(function( klass ){
            klass.create= function(){
                return obj
            }
        })
        _test.ok( Class(), obj )
    </wc:js-test>
    <wc:js-test>
        var obj1= {}
        var Class= $jam.$Class(function( klass ){
            klass.create= function(){
                return obj1
            }
        })
        var obj2= new Class
        _test.ok( obj2 instanceof Class )
    </wc:js-test>
    <wc:js-test>
        var Class= $jam.$Class(function( klass ){
            klass.prototype.method= function(){
                return obj1
            }
        })
        var obj1= new Class
        var obj2= Class()
        _test.ok( obj1.method, obj2.method )
    </wc:js-test>

</doc:root>
