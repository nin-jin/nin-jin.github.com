with( $wc )
$define
(	'$lang_css'
,	new function(){
    
        var css=
        function( str ){
            return css.root( css.stylesheet( str ) )
        }

        css.root= $lang.Wrapper( 'wc:lang_css' )
        css.remark= $lang.Wrapper( 'wc:lang_css-remark' )
        css.string= $lang.Wrapper( 'wc:lang_css-string' )
        css.bracket= $lang.Wrapper( 'wc:lang_css-bracket' )
        css.selector= $lang.Wrapper( 'wc:lang_css-selector' )
        css.tag= $lang.Wrapper( 'wc:lang_css-tag' )
        css.id= $lang.Wrapper( 'wc:lang_css-id' )
        css.klass= $lang.Wrapper( 'wc:lang_css-class' )
        css.pseudo= $lang.Wrapper( 'wc:lang_css-pseudo' )
        css.property= $lang.Wrapper( 'wc:lang_css-property' )
        css.value= $lang.Wrapper( 'wc:lang_css-value' )
             
        css.stylesheet=
        $lang.Parser( new function( ){
        
			this[ /(\/\*[\s\S]*?\*\/)/.source ]=
			$Pipe( $lang_text, css.remark )

			this[ /(\*|(?:\\[\s\S]|[\w-])+)/.source ]=
			$Pipe( $lang_text, css.tag )

			this[ /(#(?:\\[\s\S]|[\w-])+)/.source ]=
            $Pipe( $lang_text, css.id )

			this[ /(\.(?:\\[\s\S]|[\w-])+)/.source ]=
            $Pipe( $lang_text, css.klass )

			this[ /(::?(?:\\[\s\S]|[\w-])+)/.source ]=
            $Pipe( $lang_text, css.pseudo )

			this[ /\{([\s\S]+?)\}/.source ]=
            new function( ){
				var openBracket= css.bracket( '{' )
				var closeBracket= css.bracket( '}' )
				return function( style ){
					style= css.style( style )
					return openBracket + style + closeBracket
				}
			}             
        })
        
        css.style=
        $lang.Parser( new function( ){
                
			this[ /(\/\*[\s\S]*?\*\/)/.source ]=
			$Pipe( $lang_text, css.remark )

			this[ /([\w-]+\s*:)/.source  ]=
			$Pipe( $lang_text, css.property )

			this[ /([^:]+?(?:;|$))/.source ]=
            $Pipe( $lang_text, css.value )
            
        })
        
        return css
    }
) 
