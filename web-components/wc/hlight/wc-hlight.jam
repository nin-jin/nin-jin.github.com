with( $wc )
$Component
(   'wc:hlight'
,   function( nodeRoot ){
        return new function( ){
            nodeRoot= $Node( nodeRoot )

            var hlight= $lang( nodeRoot.state( 'lang' ) )
            var editable= nodeRoot.state( 'editable' )
            var source= nodeRoot.text()

            nodeRoot.clear()
            var nodeSource= $Node.parse( '<div class=" wc_hlight_source " />' )
            .text( source )
            .editable( editable === 'true' )
            .parent( nodeRoot )
    
            var sourceLast= ''
            var update= function( ){
                var source= $String( nodeSource.text() )

                if( source.$ === sourceLast ) return
                sourceLast= source.$
                
                source=
                source
                .process( hlight )
                .replace( /  /g, '\u00A0 ' )
                .replace( /  /g, ' \u00A0' )
                //.replace( /\r/, '<br/>' )
                .$
                
                var nodeRange= $DomRange().aimNodeContent( nodeSource )
                var startPoint= $DomRange().collapse2start()
                var endPoint= $DomRange().collapse2end()
                var hasStart= nodeRange.hasRange( startPoint )
                var hasEnd= nodeRange.hasRange( endPoint )
                if( hasStart ){
                    var metRange= $DomRange()
                    .equalize( 'end2start', startPoint )
                    .equalize( 'start2start', nodeRange )
                    var offsetStart= metRange.text().replace( /\r/g, '' ).length
                }
                if( hasEnd ){
                    var metRange= $DomRange()
                    .equalize( 'end2start', endPoint )
                    .equalize( 'start2start', nodeRange )
                    var offsetEnd= metRange.text().replace( /\r/g, '' ).length
                }
                nodeSource.html( source )
                var selRange= $DomRange()
                if( hasStart ){
                    selRange.equalize( 'start2start', nodeRange.clone().move( offsetStart ) )
                }
                if( hasEnd ){
                    selRange.equalize( 'end2start', nodeRange.clone().move( offsetEnd ) )
                }
                selRange.select()
            }
            
            var onEdit=
            $Observer()
            .eventName( '$jam.$eventEdit' )
            .node( nodeRoot )
            .handler( update )
            .listen()
            
            var onEnter=
            $Observer()
            .eventName( 'keypress' )
            .node( nodeRoot )
            .handler( function( event ){
                event= $Event( event )
                if( event.keyCode() != 13 ) return
                if( event.keyAccel() ) return
                event.defaultBehavior( false )
                var range= $DomRange().text( '\n' )
                range.collapse2end().select()
            })
            .listen()
            
            var onTab=
            $Observer()
            .eventName( 'keydown' )
            .node( nodeRoot )
            .handler( function( event ){
                event= $Event( event )
                if( event.keyCode() != 9 ) return
                if( event.keyAccel() ) return
                event.defaultBehavior( false )
                $DomRange().text( '    ' ).collapse2end().select()
            })
            .listen()
            
            this.destroy= function( ){
                onEdit.sleep()
                onEnter.sleep()
                onTab.sleep()
            }

            update()
            
        }
    }
)
