with( $wc )
if( $support.vml() )
$Component( '*', new function(){

	var refreshers= []
	var callRefreshers=
	function( ){
		for( var i= 0; i < refreshers.length; ++i ){
			refreshers[ i ]()
		}
	}
	var timer= setInterval( callRefreshers, 250 )
	
	return function( nodeRoot ){
		if( nodeRoot.nodeType !== 1 ) return null
        if( nodeRoot.scopeName === 'vml' ) return null

        var nodeShape= $Lazy( function( ){
            var node= $dom.parse( '<vml:shape style=" position: absolute; display: block; " />' )
            var type= nodeRoot.currentStyle[ '-wc-css3_shapetype' ] || 'wc-css3_roundrect'
            node.setAttribute( 'type', node.type= ( '#' + type ) )
			nodeRoot.parentNode.insertBefore( node, nodeRoot )
            return $Value( node )
        })
		
        var nodeStroke= $Lazy( function( ){
            var node= $dom.parse( "<vml:stroke />" )
            nodeShape().appendChild( node )
            return $Value( node )
        })

        var nodeFill= $Lazy( function( ){
            var node= $dom.parse( "<vml:fill />" )
            nodeShape().appendChild( node )
            return $Value( node )
        })

        var nodeShadow= $Lazy( function( ){
            var node= $dom.parse( "<vml:shadow />" )
            nodeShape().appendChild( node )
            return $Value( node )
        })

		var Prop= function( setter ){
			var value
			return function( val ){
				if( !arguments.length ) return value
				if( value === val ) return value
				value= val
				return setter( val )
			}
		}

		var borderRadius= Prop( function( val ){
			var data= String( val || '' ).replace( /[^\s\d]/g, '' ).split(' ')
            while( data.length < 4 ) data= data.concat( data )
            var node= nodeShape()
            if( node.adj ) node.adj.value= data
            else node.setAttribute( 'adj', data )
            return val
		})
		
		var parseHiqus=
		function( str ){
			var res= {}
            str= String( str || '' ).replace( /["']/g, '' )
			var chunks= str.split( ' ' )
			for( var i= 0; i < chunks.length; ++i ){
				var pair= chunks[ i ].split( '=' )
				if( pair.length !== 2 ) continue
				res[ pair[0] ]= pair[1].replace( /\+/g, '' )
			}
			return res
		}

		var PropEl=
		function( getNode, back ){
			return Prop( function( val ){
				var data= val
				if( data ){
					data= parseHiqus( 'on=false ' + data )
					data.on= 'true'
				} else {
					data= { on: 'false' }
				}
				var node= getNode()
				for( var key in data ){
					if( typeof node[ key ] === 'object' ){
						node[ key ].value= data[ key ]
					} else {
						node.setAttribute( key, node[ key ]= data[ key ] )
					}
				}
				back( !val )
                return val
			})
		}
		
		var stroke=
		PropEl
		(	nodeStroke
		,	function( back ){ 
				nodeRoot.style.borderColor= back ? '' : 'transparent'
			}
		)

		var fill=
		PropEl
		(	nodeFill
		,	function( back ){ 
				nodeRoot.style.background= back ? '' : 'none'
			}
		)
		
		var shadow=
		PropEl
		(	nodeShadow
		,	function( back ){ 
				nodeRoot.style.boxShadow= back ? '' : 'none'
			}
		)
		
		var left= Prop( function( val ){
			nodeShape().style.left = val + 'px'
		})

		var top= Prop( function( val ){
			nodeShape().style.top = val + 'px'
		})

		var width= Prop( function( val ){
			nodeShape().style.width = val + 'px'
		})

		var height= Prop( function( val ){
			nodeShape().style.height= val + 'px'
		})

        var refreshPosition=
        function( ){
            left( nodeRoot.offsetLeft )
            top( nodeRoot.offsetTop )
            width( nodeRoot.offsetWidth )
            height( nodeRoot.offsetHeight )
        }

		var refresh= function( ){
			var style= nodeRoot.currentStyle
			if( !style ) return
			
			if
			(   borderRadius( style[ '-wc-css3_border-radius' ] )
			+	stroke( style[ '-wc-css3_border' ] )
			+	fill( style[ '-wc-css3_background' ] )
			+	shadow( style[ '-wc-css3_box-shadow' ] )
			) refreshPosition()
		}
		
		var lazyRefresh= $Throttler( 10, function( ){
			refresh()
		})
		
		refreshers.push( refresh )

        nodeRoot.attachEvent( 'onresize', lazyRefresh )
        nodeRoot.attachEvent( 'onmove', lazyRefresh )
        nodeRoot.attachEvent( 'onmouseenter', lazyRefresh )
        nodeRoot.attachEvent( 'onmousedown', lazyRefresh )
        nodeRoot.attachEvent( 'onmouseleave', lazyRefresh )
        nodeRoot.attachEvent( 'onpropertychange', lazyRefresh )

	}
	
})
