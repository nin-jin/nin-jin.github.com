<?xml-stylesheet href="../-mix+doc/index.xsl" type="text/xsl" ?>
<doc:root
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:wc="https://github.com/nin-jin/wc"
    xmlns:doc="https://github.com/nin-jin/doc"
    >

    <h1>widget wc:js-test</h1>

    <p>Данный виджет предназначен для написания яваскриптовых тестов. Вы просто создаёте html-страничку, прописываете в тэге html пространство имён <code>xmlns:wc="https://github.com/nin-jin/wc"</code>, подключаете к ней указанные справа js и css файлы, и смело фигачите туда яваскриптовый код, окружённый тэгами <code>wc:js-test</code>.</p>
    
    <p>Давайте напишем простейший тест:</p>
    
    <wc:demo>
    <![CDATA[
        <wc:js-test>
            var foo= 'bar'
        </wc:js-test>
    ]]>
    </wc:demo>
    
    <p>Как видите, он покраснел - это означает, что тест не пройден. Это могло произойти по разным причинам: синтаксическая ошибка, возникшее исключение, либо просто не указано, когда считать тест успешно пройденным. Исправим тест, чтобы он позеленел:</p>

    <wc:demo>
    <![CDATA[
        <wc:js-test>
            var foo= 'bar'
            _test.ok()
        </wc:js-test>
    ]]>
    </wc:demo>
    
    <p>В каждом тесте вам доступна переменная <code>_test</code>, в которой содержится две функции: ok и not. Первая предназначена для позитивных утверждений (вызванная без параметров она говорит, что "всё хорошо, можно спать спокойно"), а вторая - для негативных (вызов без параметров тут же фэйлит тест).</p>
    
    <wc:demo>
    <![CDATA[
        <wc:js-test>
            _test.not()
            var foo= 'bar'
            _test.ok()
        </wc:js-test>
    ]]>
    </wc:demo>
    
    <p>Обе функции могут принимать 1 или 2 параметра. В случае одного параметра чтобы пройти тест нужно в <code>ok</code> передать истинное значение, или в <code>not</code> - ложное: </p>

    <wc:demo>
    <![CDATA[
        <wc:js-test>
            _test.ok( true )
        </wc:js-test>
        <wc:js-test>
            _test.not( false )
        </wc:js-test>
        <wc:js-test>
            _test.ok( 0 )
        </wc:js-test>
        <wc:js-test>
            _test.not( 'foo' )
        </wc:js-test>
    ]]>
    </wc:demo>
    
    <p>Как видите, переданное значение выводится рядом с указанием его типа, определяемого с помощью <a href="../../jam/classOf/jam+classOf.doc.xml">$jam.$classOf</a>.</p>
    
    <p>Если же функциям передавать 2 параметра, то <code>ok</code> будет сравнивать их на равенство, а <code>not</code> на неравенство, при этом оба переданных параметра будут выведены следом (кроме случая, где ожидается совпадение и оно действительно происходит):</p>

    <wc:demo>
    <![CDATA[
        <wc:js-test>
            _test.ok( 123, 123 )
        </wc:js-test>
        <wc:js-test>
            _test.not( 123, '123' )
        </wc:js-test>
        <wc:js-test>
            _test.ok( 0, false )
        </wc:js-test>
        <wc:js-test>
            _test.not( true, true )
        </wc:js-test>
    ]]>
    </wc:demo>
    
    <p>Пока речь шла лишь о синхронных тестах, но можно писать и асинхронные. Для этого надо лишь указать таймаут в миллисекундах (его можно указать где угодно в коде, но только один раз), до истечения которого тест должен быть завершён:</p>

    <wc:demo>
    <![CDATA[
        <wc:js-test>
            _test.deadline( 100 )
            _test.ok()
        </wc:js-test>
        <wc:js-test>
            _test.deadline( 100 )
            $jam.$schedule( 50, _test.ok )
        </wc:js-test>
        <wc:js-test>
            _test.deadline( 50 )
            $jam.$schedule( 100, _test.ok )
        </wc:js-test>
        <wc:js-test>
            $jam.$schedule( 50, _test.ok )
        </wc:js-test>
    ]]>
    </wc:demo>
    
    <p>На этом собственно и всё. Приятным бонусом является возможность отредактировать тест прямо на странице и по <code>ctrl+enter</code> запустить его - это позволяет прямо на месте подебажить код. Имейте ввиду, что все исключения будут сыпаться в консоль ошибок браузера.</p>
    
</doc:root>
